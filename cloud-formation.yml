AWSTemplateFormatVersion: '2010-09-09'
Description: Photo Album Web Application Infrastructure

Resources:
  # S3 Bucket for Frontend (now hosted as a public website)
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "assignment2-b1-frontend-cf33333"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "error.html"

  # S3 Bucket for Photos
  PhotosBucket:
    Type: AWS::S3::Bucket
    DependsOn: IndexPhotosFunction
    Properties:
      BucketName: "assignment3photobucket3333"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt IndexPhotosFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: ".jpg"

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                  - 's3:GetObject'
                  - 'rekognition:*'
                Resource: '*'

  # Lambda Functions
  IndexPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "assignment3-LF1-index-photos-cf3333"
      Runtime: "python3.12"
      Handler: "index.handler"
      Code:
        S3Bucket: "assignment3-lambda-codepipeline"
        S3Key: "LF1.zip"
      Role: !GetAtt LambdaExecutionRole.Arn

  SearchPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "assignment3-LF2-search-photos-cf3333"
      Runtime: "python3.12"
      Handler: "search.handler"
      Code:
        S3Bucket: "assignment3-lambda-codepipeline"
        S3Key: "LF2.zip"
      Role: !GetAtt LambdaExecutionRole.Arn

  # Lambda Permission for S3 Bucket
  IndexPhotosPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IndexPhotosFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt PhotosBucket.Arn

  # API Gateway for Photo App
  PhotoAppAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "Photo App API"

  # /search resource
  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PhotoAppAPI
      ParentId: !GetAtt PhotoAppAPI.RootResourceId
      PathPart: "search"

  # GET method on /search
  SearchGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PhotoAppAPI
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchPhotosFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  # OPTIONS method on /search
  SearchOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PhotoAppAPI
      ResourceId: !Ref SearchResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

Outputs:
  FrontendBucketName:
    Value: !Ref FrontendBucket
  PhotoBucketName:
    Value: !Ref PhotosBucket
  FrontendBucketPublicURL:
    Value: !Sub "http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com"
  IndexPhotosFunctionArn:
    Value: !GetAtt IndexPhotosFunction.Arn
  SearchPhotosFunctionArn:
    Value: !GetAtt SearchPhotosFunction.Arn
  PhotoAppAPIUrl:
    Value: !Sub "https://${PhotoAppAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
